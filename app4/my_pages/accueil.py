import streamlit as st

def render():
    st.title("üß† Symbolic Math App avec API externe")
    st.header("Bienvenue !")

    st.write("Utilisez le bandeau ci-dessus pour choisir une op√©ration.")
    st.image("./reflexion.png", width=300)
    
    # ‚úÖ Bouton pour r√©initialiser l'historique
    if st.button("üóëÔ∏è Vider l'historique"):
        st.session_state.history_derive = []
        st.session_state.history_evaluation = []
        st.success("Historique vid√© avec succ√®s ‚úÖ")

    # ‚úÖ Affichage am√©lior√© de l'historique
    # Historique des d√©riv√©es
    if "history_derive" in st.session_state and st.session_state.history_derive:
        st.markdown("### üßÆ D√©riv√©es r√©centes")
        for item in st.session_state.history_derive[-5:][::-1]:
            with st.container():
                st.write(f"**Expression :** `{item['expression']}`")
                st.write(f"**Variable :** `{item['variable']}`")
                st.write(f"**D√©riv√©e :** `{item['derivative']}`")
                st.markdown("---")
    else:
        st.info("Aucun calcul de d√©riv√©e effectu√© pour le moment.")

    # Historique des √©valuations num√©riques
    if "history_evaluation" in st.session_state and st.session_state.history_evaluation:
        st.markdown("### üî¢ √âvaluations num√©riques r√©centes")
        for item in st.session_state.history_evaluation[-5:][::-1]:
            with st.container():
                st.write(f"**Expression :** `{item['expression']}`")
                st.write(f"**Valeurs :** `{item['values']}`")
                st.write(f"**R√©sultat :** `{item['result']}`")
                st.markdown("---")
    else:
        st.info("Aucune √©valuation num√©rique effectu√©e pour le moment.")