import streamlit as st

st.set_page_config(page_title="Calculatrice √† touches", layout="centered")

st.title("üßÆ Calculatrice √† touches avec ic√¥nes")

# CSS pour uniformiser les boutons
st.markdown('<style>' + open('styles.css').read() + '</style>', unsafe_allow_html=True)

# √âtat de l'expression en session_state pour la persistance
if "expression" not in st.session_state:
    st.session_state.expression = ""

# Fonction pour ajouter un caract√®re √† l'expression
def append_to_expression(char):
    st.session_state.expression += str(char)

# Fonction pour √©valuer l'expression
def evaluate_expression():
    print(st.session_state.expression)
    try:
        result = eval(st.session_state.expression)
        st.session_state.expression = str(result)
    except Exception:
        st.session_state.expression = "Erreur"

# Fonction pour tout effacer
def clear_expression():
    st.session_state.expression = ""

# Affichage de l'expression actuelle
st.text_input("Expression", value=st.session_state.expression, key="display", disabled=True)

# Cr√©er la grille de boutons avec des ic√¥nes
# D√©finition des boutons avec affichage et valeur logique
buttons = [
    [("7Ô∏è‚É£", "7"), ("8Ô∏è‚É£", "8"), ("9Ô∏è‚É£", "9"), ("‚ûó", "/")],
    [("4Ô∏è‚É£", "4"), ("5Ô∏è‚É£", "5"), ("6Ô∏è‚É£", "6"), ("‚úñÔ∏è", "*")],
    [("1Ô∏è‚É£", "1"), ("2Ô∏è‚É£", "2"), ("3Ô∏è‚É£", "3"), ("‚ûñ", "-")],
    [("0Ô∏è‚É£", "0"), (".", "."), ("üü∞", "="), ("‚ûï", "+")],
]

# Mapping des labels vers les vrais op√©rateurs pour √©valuation
operators = {"‚ûó": "/", "‚úñÔ∏è": "*", "‚ûñ": "-", "‚ûï": "+"}


def calculus(val):
    if val == "=":
        evaluate_expression()
    else:
        append_to_expression(operators.get(val, val))

for row in buttons:
    cols = st.columns(len(row))
    for idx, (display, value) in enumerate(row):
        tap=cols[idx].button(display, on_click=calculus,args=(value, ))

# Bouton pour r√©initialiser
clear=st.button("üßπ Effacer", key="effacer", on_click=clear_expression)